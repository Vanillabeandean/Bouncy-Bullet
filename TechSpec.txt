Player
	Programming
		Difficulties
			-Rotation rollowing mouse pointer
			-Rendering sprite with that rotation
		Functions
			-pointToMouse() - points the player to the mouse, called every frame
		Performance Impact
			-Minimal, just calculating rotation based on mouse position and rendering sprite at that rotation
	Dependencies
		Libraries
			-None
		Assumptions
			-Mouse position is easy to get
			-Trig functions work nicely for getting angles
	Priority
		- Very High, Players are important in a game
	Feasibility
		Difficulty
			-Not that hard, it is mostly just rotation and angles
		Time Requirement
			-Low to medium, not much time required
		Issues
			-Mostly just calculating the angles and rotation of the player relative to the mouse
	Data and Variables
		Data Structures
			-none
		Local Variables
			-xPosition
			-yPosition
			-rotation
		Global Variables
			-mousePosition
	Relational Map
		Relations to Other Functions
			-Used in firing bullets
		Where is This Function Called
			-When a bullet is fired, it needs to get the position and rotation of the player in order to know where and in what direction to fire
Bullet Bouncing
	Programming
		Difficulties
			-Mostly mathematical difficulties, calculating angle of incidence, etc
			-figuring out when the bullet hits either a wall or an enemy
			-Also rendering rullet bouncing in its different rotations and position
			-Keeping track of the number of bounces
		Functions
			-calculateCollision() - when a collision is detetected, figure out angle of incidence and reflection angle, rotate sprite accordingly
			-incrementBounce() - when the bullet bounces, increment its number of bounces by 1
		Performance Impact
			-Low, calculating angles, rendering a small sprite, keeping track of a single numer changing infrequently
	Dependencies
		Libraries
			-none
		Assumptions
			-trig functions should work well for calculating angles
			-most walls will be perpendicular or parallel, making collision detection and calculating much easier
	Priority
		-High, this is a primary function of the game
	Feasibility
		Difficulty
			-Medium difficulty, both mathmatically and programming wise
		Time Requirement
			-Medium time requirement, it is not trivial, and will take some thought and work
		Issues
			-Calculating angles
			-Calculating collisions
			-Rendering different rotations
	Data and Variables
		Data Structures
			-None
		Local Variables
			-bulletRotation
			-bulletxPosition
			-bulletYPosition
			-angleOfIncidence
			-bounces
		Global Variables
			-none
	Relational Map
		Relations to Other Functions
			-Requires wall and enemy positions, triggers of collision between bullet and them
		Where is This Function Called
			-Called when the bullet is travelling and hits a wall
Enemies
	Programming
		Difficulties
			-Collision with enemy and bullet
			-Motion paths
		Functions
			-die() - when collides with bullet, track number of killed enemies and make sprite vanish
			-moveAlongPath() - moves the enemy along its motion path
		Performance Impact
			-Very minimal, only moving and rendering a single image
	Dependencies
		Libraries
			-Image libraries of Vin Deisel
		Assumptions
			-Can find an image of Vin Deisel
	Priority
		-Medium to high, without enemies, the game is pointless
	Feasibility
		Difficulty
			-Medium, easy math wise, harder programming wise
		Time Requirement
			-Low to medium
		Issues
			-Tracking along a motion path
	Data and Variables
		Data Structures
			-Collection of points for a motion path
			-Array of enemy objects
		Local Variables
			-xPosition
			-yPosition
			-motionDirection
		Global Variables
			-Array of enemies
	Relational Map
		Relations to Other Functions
			-Related to Bullet Bounding
		Where is This Function Called
			-When a bullet impacts an emeny call collision and die functions
			-constantly render enemy motion and position
Opening a gate
	Programming
		Difficulties
			-Collision between button and bullet
			-Removing hitbox of the gate
		Functions
			-openGate() - opens the gate on impact between bullet and button, removes collision and unrenders gate
		Performance Impact
			-Minimal, called very infrequently and performs very few tasks
	Dependencies
		Libraries
			-None
		Assumptions
			-None
	Priority
		-Low to medium, adds depth to game but not strictly necessary
	Feasibility
		Difficulty
			-Easy, only difficulty is keeping track of whether the gate is open or closed and changing hitbox accordingly
		Time Requirement
			-Low to medium
		Issues
			-Rendering gate opening, changing hitbox
	Data and Variables
		Data Structures
			-None
		Local Variables
			-isHit
			-buttonXPosition
			-buttonYPosition
		Global Variables
			-none
	Relational Map
		Relations to Other Functions
			-Related to bullet collision, bullet Bounces off of gate and hits button
		Where is This Function Called
			-When bullet collides with button change gate state
			-When bullet collides with gate, check whether it is open or not
Battle Royale
	Programming
		Difficulties
			-Making enemy AI
			-Allowing player motion
			-Differences between this level and the rest of them
		Functions
			-enemyAI() - calls numerous subfunctions about motion, position, firing at player, etc, too many to list here
			-movePlayer() - takes keyboard inputs to change player position and direction
		Performance Impact
			-Medium to high, rendering motion, calculating enemy AI, keeping track of all of the bullets
	Dependencies
		Libraries
			-None
		Assumptions
			-Creating a simple enemy AI should be doable
	Priority
		-Very Low, this feature is unnecessary and is more complicated than the enire rest of the game
	Feasibility
		Difficulty
			-Very difficult, AI calculations, player motion, none of the stuff used in the rest of the game
		Time Requirement
			-High
		Issues
			-Many issues, AI is very hard to write, hard to make what is essentially a completely different game, player motion
	Data and Variables
		Data Structures
			-Enemies
			-Enemy Bullets
		Local Variables
			-enemiesLeft
			-enemyAI variables
			-enemyBulletPosition
			-enemyBulletMotion
			-playerMotion
		Global Variables
			-playerPosition
			-enemyPosition
	Relational Map
		Relations to Other Functions
			-Related to bullet motion, enemy motion, player position, firing, bullet bouncing
		Where is This Function Called
			-When level reaches 10
2 Player levels
	Programming
		Difficulties
			-Requirement of 10 completely different levels
			-Keeping track of both players, their actions, etc
		Functions
			-(All of the player functions but again)
		Performance Impact
			-Medium, requirement to store 10 completely different levels, render two players, two bullets, etc
	Dependencies
		Libraries
			-None
		Assumptions
			-Keyboard has enough input channels to handle two sets of inputs
	Priority
		-Low, many other functionalities are more important
	Feasibility
		Difficulty
			-Medium, somewhat challeging, but some of the functions can be copied from the single player
			-Most of the difficulty comes from designing a brand new set of levels
		Time Requirement
			-High, good level design is hard and this adds a lot of levels to make
		Issues
			-Coming up with new level designs is hard
			-Have to come up with some way to make rotation other than mouse because mouse is used by player 1
			-Keeping track of the second player and their actions requires more complexity
			-If planning to do 2 players with the Battle Royale, becomes insanely complicated
	Data and Variables
		Data Structures
			-Players
		Local Variables
			-p2Position
			-p2Bullet
		Global Variables
			-playerPosition
			-playerRotation
			-bulletPosition
	Relational Map
		Relations to Other Functions
			-Related to similar functions to the first player, just the relations become more complicated
		Where is This Function Called
			-Called at all times in the two player mode
Level timer
	Programming
		Difficulties
			-Tracking computer time
		Functions
			-countDown() - ticks down every second
			-resetLevel() - resets level when time hits zero
		Performance Impact
			-Minimal, just a timer
	Dependencies
		Libraries
			-none
		Assumptions
			-can get computer time easily
	Priority
		-Low to medium, not that important, but also relatively easy to implement so probably worth doing
	Feasibility
		Difficulty
			-Easy, just need to get time and reset room when it hits zero
		Time Requirement
			-Low, relatively simple to code
		Issues
			-Resetting the room is the only potentially problematic area
	Data and Variables
		Data Structures
			-None
		Local Variables
			-time
		Global Variables
			-roomNumber
	Relational Map
		Relations to Other Functions
			-Removes all bullets and resets enemies
		Where is This Function Called
			-Called at all times to count time and when the timer hits zero
Ammo
	Programming
		Difficulties
			-Decrementing ammo when firing
			-Resetting room when ammo hits zero
		Functions
			-decrement() - decrements ammo when fires
			-resetRoom() - resets the room when ammo runs out
		Performance Impact
			-Very minimal, just a single number counting infrequently, and the room reset every so often
	Dependencies
		Libraries
			-none
		Assumptions
			-none
	Priority
		-Medium, not essential to the game, but should be easy enough to implement, so it adds functionality at a relatively low opportunity cost
	Feasibility
		Difficulty
		-Easy
		Time Requirement
			-Minimal
		Issues
			-The only issues that should arise would be in resetting the room, which should be relatively straightforward
	Data and Variables
		Data Structures
			-none
		Local Variables
			-ammoCount
		Global Variables
			-roomNumber
	Relational Map
		Relations to Other Functions
			-related to bullet bouncing, firing, and player
		Where is This Function Called
			-This function is called whenever the player fires a bullet or the ammo ount hits zero
Coins
	Programming
		Difficulties
			-Collisions with bullet
			-Keeping track of coins collected
		Functions
			-collect() - collects the coin when collides with the bullet, adds to coin count
		Performance Impact
			-Low, no motion to keep track of, just rendering the coin and making it go away when impacted with the bullet
	Dependencies
		Libraries
			-none
		Assumptions
			-none
	Priority
		-Low to medium, this does not add anything significant to the game really, but it is very easy to implement
	Feasibility
		Difficulty
			-Easy
		Time Requirement
			-Minimal
		Issues
			-Making coins disappear when hit, keeping track of coins across levels
	Data and Variables
		Data Structures
			-whichCoinsCollected   -array of which coins have been collected
		Local Variables
			-coinCount  -total number of coins collected
			-coinPosition
		Global Variables
			-bulletXPosition
			-bulletYPosition
	Relational Map
		Relations to Other Functions
			-related to bullet bouncing and collision
		Where is This Function Called
			-this function is called evener a bullet hits a coin
Levels
	Programming
		Difficulties
			-Designing good stages
			-Creating walls with collisions
		Functions
			-setupWalls() - puts walls into their positions
			-setupGates() - puts gates and buttons into their positions
			-setupPlayers() - puts the player into position
			-setupEnemies() - puts the enemies into position
			-setupNumbers() - sets ammo, level number, coin count, etc and displays them
		Performance Impact
			-Medium, there are a lot of things to do, but most are just one time positioning functions, and the more complicated calculations are handled by the individual elements
	Dependencies
		Libraries
			-none
		Assumptions
			-none
	Priority
		-High, it is important to have different levels
	Feasibility
		Difficulty
			-Medium, the indivual tasks arent incredibly difficult but there are a fair amount of them
		Time Requirement
			-Medium
		Issues
			-Properly resetting killed enemies
			-Getting everything into the right places
			-Keeping track of wall positions for collisions
	Data and Variables
		Data Structures
			-walls	-an array keeping track of the wall positions
		Local Variables
			-none
		Global Variables
			-walls
			-bulletXPosition
			-bulletYPosition
			-level
			-enemyPosition
			-gatePosition
			-coinPosition
			-coinCount
	Relational Map
		Relations to Other Functions
			-This is more of a larger header for the running of the game, so it relates to basically every function
		Where is This Function Called
			-Every frame, but also at the start of every level
